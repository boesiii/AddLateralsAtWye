# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AddLateralAtWye
                                 A QGIS plugin
 This plugin adds lateral lines from wyes along a main
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-19
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Ed B
        email                : boesiii@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (QgsProject, QgsExpression, QgsFeatureRequest, 
                       QgsVectorLayer, QgsField,QgsFeature, 
                       QgsGeometry, QgsRectangle, QgsPointXY,
                       QgsPoint, QgsGeometryUtils)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .add_lateral_at_wye_dialog import AddLateralAtWyeDialog
import os.path
import math


class AddLateralAtWye:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AddLateralAtWye_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Add Lateral at Wye')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AddLateralAtWye', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/add_lateral_at_wye/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Add Lateral at Wye'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Add Lateral at Wye'),
                action)
            self.iface.removeToolBarIcon(action)


    def rtd(self, r):
        d = r * 180 / 3.14
        # print (d)
        return d
    
    def dtr (self, d):
        r = d * 3.14 / 180
        return r
        
        
    
    def line_angle(self, line):
        # line.geometry()
        geom = line.geometry().asMultiPolyline()[0]
        start_pt = QgsPoint(geom[0])
        end_pt = QgsPoint(geom[-1])
        ang = QgsGeometryUtils.lineAngle(start_pt.x(),start_pt.y(),end_pt.x(),end_pt.y())
        ang = self.rtd(ang)
        return ang
        
        # print (start_pt)
        # print (end_pt)
        print (ang)
    
    def create_mem_layer (self):
        uri = "LineString?crs=epsg:2272"
        self.temp_layer = QgsVectorLayer(uri, 'temp_laterals','memory')
        self.provider = self.temp_layer.dataProvider()
        # add fields
        self.provider.addAttributes([QgsField('PIPE_ID', QVariant.String),
                                    # QgsField('LOCATION',  QVariant.String),
                                    # QgsField('START_MH',  QVariant.String),
                                    # QgsField('END_MH',  QVariant.String),
                                    # QgsField('TOT_LEN',  QVariant.String),
                                    # QgsField('SURV_LEN',  QVariant.String),
                                    # QgsField('MAIN_DIA',  QVariant.String),
                                    # QgsField('MAIN_MATL',  QVariant.String),
                                    # QgsField('DIRECTION',  QVariant.String),
                                    # QgsField('DISTANCE',  QVariant.String),
                                    # QgsField('CODE',  QVariant.String),
                                    # QgsField('DESCR',  QVariant.String),
                                    # QgsField('CLOCK',  QVariant.String),
                                    # QgsField('LAT_DIA',  QVariant.String),
                                    # QgsField('GRADE',  QVariant.String),
                                    # QgsField('COMMENT',  QVariant.String),
                                    # QgsField('ERROR',  QVariant.String),
                                    
                                    ]) #if attributes are added then you will need to populate them when creating points
        self.temp_layer.updateFields() # tell the vector layer to fetch changes from the provider
        # QgsMapLayerRegistry.instance().addMapLayer(self.temp_layer)
        QgsProject.instance().addMapLayer(self.temp_layer)
    def create_point (self, data):
        #create point feature
        ft =  QgsFeature()
        # print (point)
        ft.setGeometry(data[-1])
        # print (data)
        
        ft.setAttributes(data[0:17])
        self.provider.addFeature(ft)
        self.temp_layer.updateExtents()
        print ('created point')
    
    def bearing_correction(self, a):
        if 90 <= a <= 180:
            print ('sector se')
            a = 360 - (a - 90)
        if 270 <= a < 360:
            a = 360 - (a - 90)
            print ('sector nw')
            return a
            
        
    
    def draw_line(self, w, a, c, d):
        start_pt = QgsPoint(w.geometry().asPoint())
        a = 360 - (a - 90)
        
        if c in ('1:00', '01:00','2:00','02:00','3:00','4:00','5:00'):
            side = 'a'
        elif c in ('7:00','8:00','9:00','10:00','11:00'):
            side = 'b'
        else:
            side = 'no side'
        
        if d == 'Upstream MH' and side == 'a':
            a = a - 90
            # print ('case 1')
        elif (d == 'Upstream MH' and side == 'b'):
            a = a - 270
            # print ('case 2')
        elif (d == 'Downstream MH' and side == 'b'):
            a = a - 90
        elif (d == 'Downstream MH' and side == 'a'):
            a = a - 270
        else:
            pass
            print ('else')
            
        
        w_geom = QgsPointXY(w.geometry().asPoint())
        length = 20
        # print (a)
        # geom = feature.geometry().asPoint()
        old_x = w_geom.x()
        old_y = w_geom.y()
        #calculate new position using length
        endx = length * math.cos(math.radians(a))
        endy = length * math.sin(math.radians(a))
        new_x = old_x + endx
        new_y = old_y + endy
        end_pt = QgsPoint(new_x, new_y)
        
                
        ft =  QgsFeature()
        if side == 'a' or side == 'b':
            ft.setGeometry(QgsGeometry.fromPolyline([start_pt, end_pt]))
        else:
            # draw circle
            segments = 20
            radius = 5
            pts = []
            for i in range(segments):
                print (i)
                theta = i * (2.0 * math.pi / segments)
                p = QgsPoint(start_pt.x() + radius * math.cos(theta),
                             start_pt.y() + radius * math.sin(theta))
                pts.append(p)
            
            print (pts)
            # ft.setGeometry(QgsGeometry.fromPolyline([pts[0], pts[15]]))
            ft.setGeometry(QgsGeometry.fromPolyline(pts))
            
        # ft.setAttribute('PIPE_ID', 'TEST')
        self.provider.addFeature(ft)
        self.temp_layer.updateExtents()
        # print ('created point')
            
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = AddLateralAtWyeDialog()
            
        self.dlg.wyelyr_comboBox.clear()
        self.dlg.mainlyr_comboBox.clear()
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        
        # Populate the comboBox with names of all the loaded layers
        self.dlg.wyelyr_comboBox.addItems([layer.name() for layer in layers])
        index = self.dlg.wyelyr_comboBox.findText('Sanitary Wye', QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.dlg.wyelyr_comboBox.setCurrentIndex(index)
            
        self.dlg.mainlyr_comboBox.addItems([layer.name() for layer in layers])
        index = self.dlg.mainlyr_comboBox.findText('Sanitary Gravity Main', QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.dlg.mainlyr_comboBox.setCurrentIndex(index)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # pass
            sel_wye_lyr_index = self.dlg.wyelyr_comboBox.currentIndex()
            self.wye_lyr = layers[sel_wye_lyr_index].layer()
            sel_main_lyr_index = self.dlg.mainlyr_comboBox.currentIndex()
            self.main_lyr = layers[sel_main_lyr_index].layer()
            
            selected_wyes = self.wye_lyr.selectedFeatures()
            # print (len(selected_wyes))
            self.create_mem_layer()
            for wye in selected_wyes:
                wye_geom = QgsPointXY(wye.geometry().asPoint())
                                
                # select pipe main
                rectangle = QgsRectangle(wye_geom.x() - 0.1, 
                                wye_geom.y() - 0.1, 
                                wye_geom.x() + 0.1, 
                                wye_geom.y() + 0.1)
                # feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(w[3].asPoint())))                
                self.main_lyr.selectByRect(rectangle)
                selected_mains = self.main_lyr.selectedFeatures()
                for main in selected_mains:
                    # adjust angle from north
                    angle = self.line_angle(main)
                    # print (angle)
                    
                clock = wye['CLOCK']
                # direction = wye['MH_REF']
                direction = wye['DIRECTION']
                self.draw_line(wye, angle, clock, direction)
                # print (clock)
                # print(feature['name'])
            
        self.main_lyr.removeSelection()
                    
                    
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
